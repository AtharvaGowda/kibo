{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-combobox-custom-actions-7",
  "type": "registry:component",
  "title": "Combobox Custom Actions 7",
  "description": "A combobox pattern: combobox-custom-actions-7",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/combobox/custom-actions/combobox-custom-actions-7.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport const title = \"Clear/Reset Button\";\n\nconst themes = [\n  { value: \"light\", label: \"Light\" },\n  { value: \"dark\", label: \"Dark\" },\n  { value: \"system\", label: \"System\" },\n];\n\nconst Example = () => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"system\");\n\n  return (\n    <Popover onOpenChange={setOpen} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n          role=\"combobox\"\n          variant=\"outline\"\n        >\n          {value\n            ? themes.find((theme) => theme.value === value)?.label\n            : \"Select theme...\"}\n          <div className=\"ml-2 flex items-center gap-1\">\n            {value && (\n              <button\n                className=\"rounded-sm hover:bg-accent\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  setValue(\"\");\n                }}\n              >\n                <X className=\"size-4 opacity-50 hover:opacity-100\" />\n              </button>\n            )}\n            <ChevronsUpDown className=\"size-4 shrink-0 opacity-50\" />\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search themes...\" />\n          <CommandList>\n            <CommandEmpty>No theme found.</CommandEmpty>\n            <CommandGroup>\n              {themes.map((theme) => (\n                <CommandItem\n                  key={theme.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue);\n                    setOpen(false);\n                  }}\n                  value={theme.value}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 size-4\",\n                      value === theme.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {theme.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}