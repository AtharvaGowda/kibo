{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-data-table-advanced-1",
  "type": "registry:component",
  "title": "Data Table Advanced 1",
  "description": "A data-table pattern: data-table-advanced-1",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/data-table/advanced/data-table-advanced-1.tsx",
      "content": "\"use client\";\n\nimport {\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { ChevronDownIcon, ChevronRightIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nexport const title = \"Expandable Sub-Rows\";\n\ntype Project = {\n  id: string;\n  name: string;\n  status: string;\n  tasks?: Task[];\n};\n\ntype Task = {\n  id: string;\n  name: string;\n  assignee: string;\n  status: string;\n};\n\nconst data: Project[] = [\n  {\n    id: \"1\",\n    name: \"Website Redesign\",\n    status: \"In Progress\",\n    tasks: [\n      { id: \"1-1\", name: \"Design mockups\", assignee: \"John\", status: \"Done\" },\n      {\n        id: \"1-2\",\n        name: \"Frontend dev\",\n        assignee: \"Jane\",\n        status: \"In Progress\",\n      },\n      { id: \"1-3\", name: \"Review & QA\", assignee: \"Bob\", status: \"Pending\" },\n    ],\n  },\n  {\n    id: \"2\",\n    name: \"Mobile App\",\n    status: \"Planning\",\n    tasks: [\n      { id: \"2-1\", name: \"User research\", assignee: \"Alice\", status: \"Done\" },\n      {\n        id: \"2-2\",\n        name: \"Wireframes\",\n        assignee: \"Charlie\",\n        status: \"In Progress\",\n      },\n    ],\n  },\n  {\n    id: \"3\",\n    name: \"API Integration\",\n    status: \"Completed\",\n    tasks: [\n      { id: \"3-1\", name: \"API design\", assignee: \"Dave\", status: \"Done\" },\n      { id: \"3-2\", name: \"Implementation\", assignee: \"Eve\", status: \"Done\" },\n      { id: \"3-3\", name: \"Testing\", assignee: \"Frank\", status: \"Done\" },\n    ],\n  },\n];\n\nconst columns: ColumnDef<Project>[] = [\n  {\n    id: \"expander\",\n    header: () => null,\n    cell: ({ row }) => {\n      return row.original.tasks ? (\n        <Button\n          className=\"h-8 w-8 p-0\"\n          onClick={() => row.toggleExpanded()}\n          size=\"sm\"\n          variant=\"ghost\"\n        >\n          {row.getIsExpanded() ? (\n            <ChevronDownIcon className=\"size-4\" />\n          ) : (\n            <ChevronRightIcon className=\"size-4\" />\n          )}\n        </Button>\n      ) : null;\n    },\n  },\n  {\n    accessorKey: \"name\",\n    header: \"Name\",\n    cell: ({ row }) => (\n      <div className=\"font-medium\">{row.getValue(\"name\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => <div>{row.getValue(\"status\")}</div>,\n  },\n];\n\nconst Example = () => {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowCanExpand: (row) => !!row.original.tasks,\n  });\n\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"rounded-md border bg-background\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <React.Fragment key={row.id}>\n                  <TableRow>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                  {row.getIsExpanded() && row.original.tasks && (\n                    <TableRow>\n                      <TableCell colSpan={columns.length}>\n                        <div className=\"rounded-md bg-muted/50 p-4\">\n                          <div className=\"space-y-2\">\n                            {row.original.tasks.map((task) => (\n                              <div\n                                className=\"flex items-center gap-4 text-sm\"\n                                key={task.id}\n                              >\n                                <div className=\"flex-1 font-medium\">\n                                  {task.name}\n                                </div>\n                                <div className=\"text-muted-foreground\">\n                                  {task.assignee}\n                                </div>\n                                <div>{task.status}</div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </React.Fragment>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  className=\"h-24 text-center\"\n                  colSpan={columns.length}\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}