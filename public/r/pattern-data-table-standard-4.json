{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-data-table-standard-4",
  "type": "registry:component",
  "title": "Data Table Standard 4",
  "description": "A data-table pattern: data-table-standard-4",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/data-table/standard/data-table-standard-4.tsx",
      "content": "\"use client\";\n\nimport {\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nexport const title = \"Paginated Data Table\";\n\ntype Transaction = {\n  id: string;\n  description: string;\n  amount: number;\n  date: string;\n  status: string;\n};\n\nconst data: Transaction[] = [\n  {\n    id: \"TXN-001\",\n    description: \"Payment received\",\n    amount: 500,\n    date: \"2024-01-15\",\n    status: \"Completed\",\n  },\n  {\n    id: \"TXN-002\",\n    description: \"Subscription renewal\",\n    amount: 29,\n    date: \"2024-01-16\",\n    status: \"Completed\",\n  },\n  {\n    id: \"TXN-003\",\n    description: \"Refund processed\",\n    amount: -150,\n    date: \"2024-01-17\",\n    status: \"Completed\",\n  },\n  {\n    id: \"TXN-004\",\n    description: \"Product purchase\",\n    amount: 89.99,\n    date: \"2024-01-18\",\n    status: \"Pending\",\n  },\n  {\n    id: \"TXN-005\",\n    description: \"Service fee\",\n    amount: 12,\n    date: \"2024-01-19\",\n    status: \"Completed\",\n  },\n  {\n    id: \"TXN-006\",\n    description: \"Payment received\",\n    amount: 750,\n    date: \"2024-01-20\",\n    status: \"Completed\",\n  },\n  {\n    id: \"TXN-007\",\n    description: \"Withdrawal\",\n    amount: -200,\n    date: \"2024-01-21\",\n    status: \"Pending\",\n  },\n  {\n    id: \"TXN-008\",\n    description: \"Deposit\",\n    amount: 1000,\n    date: \"2024-01-22\",\n    status: \"Completed\",\n  },\n];\n\nconst columns: ColumnDef<Transaction>[] = [\n  {\n    accessorKey: \"id\",\n    header: \"ID\",\n    cell: ({ row }) => <div className=\"font-medium\">{row.getValue(\"id\")}</div>,\n  },\n  {\n    accessorKey: \"description\",\n    header: \"Description\",\n    cell: ({ row }) => <div>{row.getValue(\"description\")}</div>,\n  },\n  {\n    accessorKey: \"date\",\n    header: \"Date\",\n    cell: ({ row }) => <div>{row.getValue(\"date\")}</div>,\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => <div>{row.getValue(\"status\")}</div>,\n  },\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = Number.parseFloat(row.getValue(\"amount\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return <div className=\"text-right font-medium\">{formatted}</div>;\n    },\n  },\n];\n\nconst Example = () => {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    initialState: {\n      pagination: {\n        pageSize: 5,\n      },\n    },\n  });\n\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"rounded-md border bg-background\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  className=\"h-24 text-center\"\n                  colSpan={columns.length}\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-between py-4\">\n        <div className=\"text-muted-foreground text-sm\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            disabled={!table.getCanPreviousPage()}\n            onClick={() => table.previousPage()}\n            size=\"sm\"\n            variant=\"outline\"\n          >\n            Previous\n          </Button>\n          <Button\n            disabled={!table.getCanNextPage()}\n            onClick={() => table.nextPage()}\n            size=\"sm\"\n            variant=\"outline\"\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}