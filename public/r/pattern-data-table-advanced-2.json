{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-data-table-advanced-2",
  "type": "registry:component",
  "title": "Data Table Advanced 2",
  "description": "A data-table pattern: data-table-advanced-2",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/data-table/advanced/data-table-advanced-2.tsx",
      "content": "\"use client\";\n\nimport {\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nexport const title = \"Numeric Pagination\";\n\ntype Invoice = {\n  id: string;\n  client: string;\n  amount: number;\n  status: string;\n  date: string;\n};\n\nconst data: Invoice[] = Array.from({ length: 25 }, (_, i) => ({\n  id: `INV-${String(i + 1).padStart(3, \"0\")}`,\n  client: `Client ${i + 1}`,\n  amount: Math.floor(Math.random() * 5000) + 500,\n  status: [\"Paid\", \"Pending\", \"Overdue\"][Math.floor(Math.random() * 3)],\n  date: `2024-01-${String((i % 28) + 1).padStart(2, \"0\")}`,\n}));\n\nconst columns: ColumnDef<Invoice>[] = [\n  {\n    accessorKey: \"id\",\n    header: \"Invoice ID\",\n    cell: ({ row }) => <div className=\"font-medium\">{row.getValue(\"id\")}</div>,\n  },\n  {\n    accessorKey: \"client\",\n    header: \"Client\",\n    cell: ({ row }) => <div>{row.getValue(\"client\")}</div>,\n  },\n  {\n    accessorKey: \"date\",\n    header: \"Date\",\n    cell: ({ row }) => <div>{row.getValue(\"date\")}</div>,\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => <div>{row.getValue(\"status\")}</div>,\n  },\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = Number.parseFloat(row.getValue(\"amount\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return <div className=\"text-right font-medium\">{formatted}</div>;\n    },\n  },\n];\n\nconst Example = () => {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    initialState: {\n      pagination: {\n        pageSize: 5,\n      },\n    },\n  });\n\n  const currentPage = table.getState().pagination.pageIndex;\n  const pageCount = table.getPageCount();\n\n  const getPageNumbers = () => {\n    const pages: (number | string)[] = [];\n    const showEllipsisStart = currentPage > 2;\n    const showEllipsisEnd = currentPage < pageCount - 3;\n\n    if (pageCount <= 7) {\n      return Array.from({ length: pageCount }, (_, i) => i);\n    }\n\n    pages.push(0);\n\n    if (showEllipsisStart) {\n      pages.push(\"...\");\n      pages.push(currentPage - 1, currentPage, currentPage + 1);\n    } else {\n      pages.push(1, 2, 3);\n    }\n\n    if (showEllipsisEnd) {\n      pages.push(\"...\");\n    } else if (currentPage < pageCount - 3) {\n      pages.push(pageCount - 3, pageCount - 2);\n    }\n\n    if (currentPage >= pageCount - 3) {\n      for (let i = Math.max(4, currentPage - 1); i < pageCount - 1; i++) {\n        if (!pages.includes(i)) {\n          pages.push(i);\n        }\n      }\n    }\n\n    pages.push(pageCount - 1);\n\n    return pages;\n  };\n\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"rounded-md border bg-background\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  className=\"h-24 text-center\"\n                  colSpan={columns.length}\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-center gap-1 py-4\">\n        <Button\n          disabled={!table.getCanPreviousPage()}\n          onClick={() => table.previousPage()}\n          size=\"sm\"\n          variant=\"outline\"\n        >\n          Previous\n        </Button>\n        {getPageNumbers().map((page, index) =>\n          typeof page === \"number\" ? (\n            <Button\n              className=\"h-8 w-8 p-0\"\n              key={index}\n              onClick={() => table.setPageIndex(page)}\n              size=\"sm\"\n              variant={currentPage === page ? \"default\" : \"outline\"}\n            >\n              {page + 1}\n            </Button>\n          ) : (\n            <span className=\"px-2\" key={index}>\n              {page}\n            </span>\n          )\n        )}\n        <Button\n          disabled={!table.getCanNextPage()}\n          onClick={() => table.nextPage()}\n          size=\"sm\"\n          variant=\"outline\"\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}