{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-form-validation-3",
  "type": "registry:component",
  "title": "Form Validation 3",
  "description": "A form pattern: form-validation-3",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/form/validation/form-validation-3.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\nexport const title = \"Email Validation\";\n\nconst formSchema = z\n  .object({\n    email: z\n      .string()\n      .min(1, \"Email is required\")\n      .email(\"Please enter a valid email address\"),\n    confirmEmail: z\n      .string()\n      .min(1, \"Please confirm your email\")\n      .email(\"Please enter a valid email address\"),\n  })\n  .refine((data) => data.email === data.confirmEmail, {\n    message: \"Emails don't match\",\n    path: [\"confirmEmail\"],\n  });\n\nconst Example = () => {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      confirmEmail: \"\",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values);\n  }\n\n  return (\n    <div className=\"w-full max-w-md\">\n      <Form {...form}>\n        <form className=\"space-y-4\" onSubmit={form.handleSubmit(onSubmit)}>\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input\n                    className=\"bg-background\"\n                    placeholder=\"you@example.com\"\n                    type=\"email\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormDescription>Enter your email address.</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"confirmEmail\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Confirm Email</FormLabel>\n                <FormControl>\n                  <Input\n                    className=\"bg-background\"\n                    placeholder=\"you@example.com\"\n                    type=\"email\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormDescription>\n                  Re-enter your email to confirm.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\">Continue</Button>\n        </form>\n      </Form>\n    </div>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}