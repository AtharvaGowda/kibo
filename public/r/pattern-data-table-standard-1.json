{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-data-table-standard-1",
  "type": "registry:component",
  "title": "Data Table Standard 1",
  "description": "A data-table pattern: data-table-standard-1",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/data-table/standard/data-table-standard-1.tsx",
      "content": "\"use client\";\n\nimport {\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  type SortingState,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { ArrowUpDownIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nexport const title = \"Basic Data Table with Checkboxes\";\n\ntype Product = {\n  id: string;\n  name: string;\n  category: string;\n  price: number;\n  stock: number;\n};\n\nconst data: Product[] = [\n  { id: \"1\", name: \"Laptop\", category: \"Electronics\", price: 999, stock: 24 },\n  { id: \"2\", name: \"Headphones\", category: \"Audio\", price: 199, stock: 156 },\n  { id: \"3\", name: \"Keyboard\", category: \"Accessories\", price: 79, stock: 89 },\n  { id: \"4\", name: \"Mouse\", category: \"Accessories\", price: 49, stock: 234 },\n  { id: \"5\", name: \"Monitor\", category: \"Electronics\", price: 349, stock: 43 },\n];\n\nconst columns: ColumnDef<Product>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        aria-label=\"Select all\"\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        aria-label=\"Select row\"\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"name\",\n    header: ({ column }) => (\n      <Button\n        onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        variant=\"ghost\"\n      >\n        Name\n        <ArrowUpDownIcon className=\"ml-2 size-4\" />\n      </Button>\n    ),\n    cell: ({ row }) => (\n      <div className=\"font-medium\">{row.getValue(\"name\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"category\",\n    header: \"Category\",\n    cell: ({ row }) => <div>{row.getValue(\"category\")}</div>,\n  },\n  {\n    accessorKey: \"price\",\n    header: () => <div className=\"text-right\">Price</div>,\n    cell: ({ row }) => {\n      const price = Number.parseFloat(row.getValue(\"price\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(price);\n      return <div className=\"text-right font-medium\">{formatted}</div>;\n    },\n  },\n  {\n    accessorKey: \"stock\",\n    header: () => <div className=\"text-right\">Stock</div>,\n    cell: ({ row }) => (\n      <div className=\"text-right\">{row.getValue(\"stock\")}</div>\n    ),\n  },\n];\n\nconst Example = () => {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [rowSelection, setRowSelection] = React.useState({});\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      rowSelection,\n    },\n  });\n\n  return (\n    <div className=\"w-full max-w-4xl\">\n      <div className=\"rounded-md border bg-background\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  data-state={row.getIsSelected() && \"selected\"}\n                  key={row.id}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  className=\"h-24 text-center\"\n                  colSpan={columns.length}\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end py-4\">\n        <div className=\"text-muted-foreground text-sm\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}