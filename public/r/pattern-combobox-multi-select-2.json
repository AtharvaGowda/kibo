{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-combobox-multi-select-2",
  "type": "registry:component",
  "title": "Combobox Multi Select 2",
  "description": "A combobox pattern: combobox-multi-select-2",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/combobox/multi-select/combobox-multi-select-2.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport const title = \"With Select All Option\";\n\nconst permissions = [\n  { value: \"read\", label: \"Read\" },\n  { value: \"write\", label: \"Write\" },\n  { value: \"delete\", label: \"Delete\" },\n  { value: \"admin\", label: \"Admin\" },\n];\n\nconst Example = () => {\n  const [open, setOpen] = useState(false);\n  const [selectedValues, setSelectedValues] = useState<string[]>([]);\n\n  const allSelected = selectedValues.length === permissions.length;\n\n  return (\n    <Popover onOpenChange={setOpen} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          aria-expanded={open}\n          className=\"w-[250px] justify-between\"\n          role=\"combobox\"\n          variant=\"outline\"\n        >\n          {selectedValues.length > 0\n            ? `${selectedValues.length} permission(s) selected`\n            : \"Select permissions...\"}\n          <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[250px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search permissions...\" />\n          <CommandList>\n            <CommandEmpty>No permission found.</CommandEmpty>\n            <CommandGroup>\n              <CommandItem\n                onSelect={() => {\n                  if (allSelected) {\n                    setSelectedValues([]);\n                  } else {\n                    setSelectedValues(permissions.map((p) => p.value));\n                  }\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 size-4\",\n                    allSelected ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                <span className=\"font-medium\">Select All</span>\n              </CommandItem>\n            </CommandGroup>\n            <CommandSeparator />\n            <CommandGroup>\n              {permissions.map((permission) => (\n                <CommandItem\n                  key={permission.value}\n                  onSelect={(currentValue) => {\n                    setSelectedValues(\n                      selectedValues.includes(currentValue)\n                        ? selectedValues.filter((v) => v !== currentValue)\n                        : [...selectedValues, currentValue]\n                    );\n                  }}\n                  value={permission.value}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 size-4\",\n                      selectedValues.includes(permission.value)\n                        ? \"opacity-100\"\n                        : \"opacity-0\"\n                    )}\n                  />\n                  {permission.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}