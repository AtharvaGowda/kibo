{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-combobox-custom-actions-4",
  "type": "registry:component",
  "title": "Combobox Custom Actions 4",
  "description": "A combobox pattern: combobox-custom-actions-4",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/combobox/custom-actions/combobox-custom-actions-4.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronsUpDown, Loader2 } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport const title = \"Async/Dynamic Search\";\n\nconst Example = () => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const [results, setResults] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (!search) {\n      setResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    const timer = setTimeout(() => {\n      // Simulate API call\n      setResults([\n        `${search} - Result 1`,\n        `${search} - Result 2`,\n        `${search} - Result 3`,\n      ]);\n      setIsSearching(false);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [search]);\n\n  return (\n    <Popover onOpenChange={setOpen} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          aria-expanded={open}\n          className=\"w-[250px] justify-between\"\n          role=\"combobox\"\n          variant=\"outline\"\n        >\n          {value || \"Search dynamically...\"}\n          <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[250px] p-0\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            onValueChange={setSearch}\n            placeholder=\"Type to search...\"\n            value={search}\n          />\n          <CommandList>\n            {isSearching ? (\n              <div className=\"flex items-center justify-center p-4\">\n                <Loader2 className=\"size-4 animate-spin\" />\n                <span className=\"ml-2 text-muted-foreground text-sm\">\n                  Searching...\n                </span>\n              </div>\n            ) : (\n              <>\n                {!search && (\n                  <div className=\"p-4 text-center text-muted-foreground text-sm\">\n                    Start typing to search\n                  </div>\n                )}\n                {search && results.length === 0 && !isSearching && (\n                  <CommandEmpty>No results found.</CommandEmpty>\n                )}\n                {results.length > 0 && (\n                  <CommandGroup>\n                    {results.map((result) => (\n                      <CommandItem\n                        key={result}\n                        onSelect={(currentValue) => {\n                          setValue(currentValue === value ? \"\" : currentValue);\n                          setOpen(false);\n                        }}\n                        value={result}\n                      >\n                        <Check\n                          className={cn(\n                            \"mr-2 size-4\",\n                            value === result ? \"opacity-100\" : \"opacity-0\"\n                          )}\n                        />\n                        {result}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                )}\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}