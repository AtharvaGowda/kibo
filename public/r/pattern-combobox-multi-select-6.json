{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-combobox-multi-select-6",
  "type": "registry:component",
  "title": "Combobox Multi Select 6",
  "description": "A combobox pattern: combobox-multi-select-6",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/combobox/multi-select/combobox-multi-select-6.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport const title = \"With Max Selections Limit\";\n\nconst interests = [\n  { value: \"technology\", label: \"Technology\" },\n  { value: \"science\", label: \"Science\" },\n  { value: \"art\", label: \"Art\" },\n  { value: \"music\", label: \"Music\" },\n  { value: \"sports\", label: \"Sports\" },\n  { value: \"travel\", label: \"Travel\" },\n];\n\nconst MAX_SELECTIONS = 3;\n\nconst Example = () => {\n  const [open, setOpen] = useState(false);\n  const [selectedValues, setSelectedValues] = useState<string[]>([]);\n\n  const isMaxReached = selectedValues.length >= MAX_SELECTIONS;\n\n  return (\n    <Popover onOpenChange={setOpen} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          aria-expanded={open}\n          className=\"w-[250px] justify-between\"\n          role=\"combobox\"\n          variant=\"outline\"\n        >\n          {selectedValues.length > 0 ? (\n            <span>\n              {selectedValues.length}/{MAX_SELECTIONS} selected\n            </span>\n          ) : (\n            \"Select interests...\"\n          )}\n          <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[250px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search interests...\" />\n          <CommandList>\n            <CommandEmpty>No interest found.</CommandEmpty>\n            {isMaxReached && (\n              <div className=\"p-2 text-center text-muted-foreground text-xs\">\n                Maximum {MAX_SELECTIONS} selections reached\n              </div>\n            )}\n            <CommandGroup>\n              {interests.map((interest) => {\n                const isSelected = selectedValues.includes(interest.value);\n                const isDisabled = !isSelected && isMaxReached;\n\n                return (\n                  <CommandItem\n                    className={cn(isDisabled && \"opacity-50\")}\n                    disabled={isDisabled}\n                    key={interest.value}\n                    onSelect={(currentValue) => {\n                      if (isDisabled) {\n                        return;\n                      }\n                      setSelectedValues(\n                        selectedValues.includes(currentValue)\n                          ? selectedValues.filter((v) => v !== currentValue)\n                          : [...selectedValues, currentValue]\n                      );\n                    }}\n                    value={interest.value}\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 size-4\",\n                        isSelected ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    {interest.label}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}