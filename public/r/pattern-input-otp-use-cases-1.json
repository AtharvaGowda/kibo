{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-input-otp-use-cases-1",
  "type": "registry:component",
  "title": "Input Otp Use Cases 1",
  "description": "A input-otp pattern: input-otp-use-cases-1",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/input-otp/use-cases/input-otp-use-cases-1.tsx",
      "content": "\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Mail } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\";\n\nexport const title = \"Email Verification Flow\";\n\nconst formSchema = z.object({\n  code: z.string().min(6, {\n    message: \"Verification code must be 6 characters.\",\n  }),\n});\n\nconst Example = () => {\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsVerifying(true);\n    // Simulate verification\n    setTimeout(() => {\n      setIsVerifying(false);\n      toast.success(\"Email verified successfully!\");\n    }, 1500);\n  }\n\n  return (\n    <div className=\"w-full max-w-sm space-y-6\">\n      <div className=\"flex flex-col items-center space-y-2 text-center\">\n        <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-primary/10\">\n          <Mail className=\"h-6 w-6 text-primary\" />\n        </div>\n        <h2 className=\"font-semibold text-2xl\">Check your email</h2>\n        <p className=\"text-muted-foreground text-sm\">\n          We sent a verification code to{\" \"}\n          <span className=\"font-medium\">user@example.com</span>\n        </p>\n      </div>\n      <Form {...form}>\n        <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\n          <FormField\n            control={form.control}\n            name=\"code\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"flex justify-center\">\n                    <InputOTP maxLength={6} {...field}>\n                      <InputOTPGroup>\n                        <InputOTPSlot className=\"bg-background\" index={0} />\n                        <InputOTPSlot className=\"bg-background\" index={1} />\n                        <InputOTPSlot className=\"bg-background\" index={2} />\n                      </InputOTPGroup>\n                      <InputOTPSeparator />\n                      <InputOTPGroup>\n                        <InputOTPSlot className=\"bg-background\" index={3} />\n                        <InputOTPSlot className=\"bg-background\" index={4} />\n                        <InputOTPSlot className=\"bg-background\" index={5} />\n                      </InputOTPGroup>\n                    </InputOTP>\n                  </div>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button className=\"w-full\" disabled={isVerifying} type=\"submit\">\n            {isVerifying ? \"Verifying...\" : \"Verify Email\"}\n          </Button>\n        </form>\n      </Form>\n      <div className=\"text-center text-muted-foreground text-sm\">\n        Didn't receive the email?{\" \"}\n        <Button className=\"h-auto p-0 font-normal\" type=\"button\" variant=\"link\">\n          Resend code\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}