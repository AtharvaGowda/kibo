{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-combobox-multi-select-1",
  "type": "registry:component",
  "title": "Combobox Multi Select 1",
  "description": "A combobox pattern: combobox-multi-select-1",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/combobox/multi-select/combobox-multi-select-1.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport const title = \"Multiple Items with Badges\";\n\nconst tags = [\n  { value: \"react\", label: \"React\" },\n  { value: \"vue\", label: \"Vue\" },\n  { value: \"angular\", label: \"Angular\" },\n  { value: \"svelte\", label: \"Svelte\" },\n  { value: \"solid\", label: \"Solid\" },\n];\n\nconst Example = () => {\n  const [open, setOpen] = useState(false);\n  const [selectedValues, setSelectedValues] = useState<string[]>([]);\n\n  return (\n    <Popover onOpenChange={setOpen} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          role=\"combobox\"\n          variant=\"outline\"\n        >\n          <div className=\"flex flex-wrap gap-1\">\n            {selectedValues.length > 0 ? (\n              selectedValues.map((value) => (\n                <Badge className=\"mr-1\" key={value} variant=\"secondary\">\n                  {tags.find((tag) => tag.value === value)?.label}\n                  <button\n                    className=\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                    onClick={() =>\n                      setSelectedValues(\n                        selectedValues.filter((v) => v !== value)\n                      )\n                    }\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        setSelectedValues(\n                          selectedValues.filter((v) => v !== value)\n                        );\n                      }\n                    }}\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                  >\n                    <X className=\"size-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                </Badge>\n              ))\n            ) : (\n              <span className=\"text-muted-foreground\">Select tags...</span>\n            )}\n          </div>\n          <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search tags...\" />\n          <CommandList>\n            <CommandEmpty>No tag found.</CommandEmpty>\n            <CommandGroup>\n              {tags.map((tag) => (\n                <CommandItem\n                  key={tag.value}\n                  onSelect={(currentValue) => {\n                    setSelectedValues(\n                      selectedValues.includes(currentValue)\n                        ? selectedValues.filter((v) => v !== currentValue)\n                        : [...selectedValues, currentValue]\n                    );\n                  }}\n                  value={tag.value}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 size-4\",\n                      selectedValues.includes(tag.value)\n                        ? \"opacity-100\"\n                        : \"opacity-0\"\n                    )}\n                  />\n                  {tag.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}