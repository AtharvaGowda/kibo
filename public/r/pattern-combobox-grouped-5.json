{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern-combobox-grouped-5",
  "type": "registry:component",
  "title": "Combobox Grouped 5",
  "description": "A combobox pattern: combobox-grouped-5",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/patterns/combobox/grouped/combobox-grouped-5.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronDown, ChevronRight, ChevronsUpDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport const title = \"Collapsible Groups\";\n\nconst departments = {\n  Engineering: [\n    { value: \"software\", label: \"Software\" },\n    { value: \"hardware\", label: \"Hardware\" },\n    { value: \"qa\", label: \"QA\" },\n  ],\n  Marketing: [\n    { value: \"content\", label: \"Content\" },\n    { value: \"social\", label: \"Social Media\" },\n    { value: \"seo\", label: \"SEO\" },\n  ],\n};\n\nconst Example = () => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [collapsed, setCollapsed] = useState<Record<string, boolean>>({\n    Marketing: true,\n  });\n\n  return (\n    <Popover onOpenChange={setOpen} open={open}>\n      <PopoverTrigger asChild>\n        <Button\n          aria-expanded={open}\n          className=\"w-[250px] justify-between\"\n          role=\"combobox\"\n          variant=\"outline\"\n        >\n          {value\n            ? Object.values(departments)\n                .flat()\n                .find((item) => item.value === value)?.label\n            : \"Select department...\"}\n          <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[250px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search...\" />\n          <CommandList>\n            <CommandEmpty>No department found.</CommandEmpty>\n            {Object.entries(departments).map(([category, items]) => {\n              const isCollapsed = collapsed[category];\n              return (\n                <CommandGroup\n                  heading={\n                    <button\n                      className=\"flex w-full items-center gap-1\"\n                      onClick={() =>\n                        setCollapsed((prev) => ({\n                          ...prev,\n                          [category]: !prev[category],\n                        }))\n                      }\n                    >\n                      {isCollapsed ? (\n                        <ChevronRight className=\"size-3\" />\n                      ) : (\n                        <ChevronDown className=\"size-3\" />\n                      )}\n                      {category}\n                    </button>\n                  }\n                  key={category}\n                >\n                  {!isCollapsed &&\n                    items.map((item) => (\n                      <CommandItem\n                        key={item.value}\n                        onSelect={(currentValue) => {\n                          setValue(currentValue === value ? \"\" : currentValue);\n                          setOpen(false);\n                        }}\n                        value={item.value}\n                      >\n                        <Check\n                          className={cn(\n                            \"mr-2 size-4\",\n                            value === item.value ? \"opacity-100\" : \"opacity-0\"\n                          )}\n                        />\n                        {item.label}\n                      </CommandItem>\n                    ))}\n                </CommandGroup>\n              );\n            })}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Example;\n",
      "type": "registry:component"
    }
  ]
}